<?phpclass EncryptionHandler{	//the add and strip padding I believe are fully PKCS7 compliant...//if something weird ever comes up let me know...//blocksize is in bytes not bits (like it is in C#)function addpadding($string, $blocksize = 32){	$len = strlen($string);	$pad = $blocksize - ($len % $blocksize);	$string .= str_repeat(chr($pad), $pad);	return $string;}function strippadding($string){	$slast = ord(substr($string, -1));	$slastc = chr($slast);	$pcheck = substr($string, -$slast);	if(preg_match("/$slastc{".$slast."}/", $string)){		$string = substr($string, 0, strlen($string)-$slast);		return $string;	} else {		return false;	}}function readkeyfile($keyfile = "key/key.key"){	$file = str_replace("\r\n", "", @file($keyfile));	return $file;}function genkey(){	//yes I know it says mcrypt_create_iv	//it really doesn't matter and php doesn't have mcrypt_create_key	//and because the iv has to be the same size as key anyway	$r[0] = base64_encode(mcrypt_create_iv(32));	$r[1] =  base64_encode(mcrypt_create_iv(32));	return $r;}//server isn't supposed to be writing keyfiles anywayfunction writenewkeyfile($keyfile = "key/key.key"){	$h = fopen($keyfile, "w");	fwrite($h, implode("\r\n", genkey())."\r\n");}function encrypt($data, $key, $iv){	//client should format it with windows line endings	$key = $key ? base64_decode($key) : base64_decode(DEFAULTKEY);	$iv = $iv ? base64_decode($iv) : base64_decode(DEFAULTIV);	return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, addpadding($data), MCRYPT_MODE_CBC, $iv));	}function decrypt($data, $key = null, $iv = null){	$key = $key ? base64_decode($key) : base64_decode(DEFAULTKEY);	$iv = $iv ? base64_decode($iv) : base64_decode(DEFAULTIV);	return strippadding(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, base64_decode($data), MCRYPT_MODE_CBC, $iv));}}